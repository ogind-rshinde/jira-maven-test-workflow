
pipeline {
  agent {
    node {
      label 'dev001-agent'
    }
  }  
  stages {
    stage ('Build Java') {
      steps {
          echo "Build is : ${buildMode}"
      }
    } 
    stage ('Java Build confirmation') {
      when {
            expression {
                getCurrentBuildGitDetails()
            }
        }
      steps {
          echo "Java build has started."
      }
    } 
  }
}

@NonCPS
def getCurrentBuildGitDetails() {
    def changeLogSets = currentBuild.changeSets
    def isOciBuildRequired = false
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)
            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                def modifiedFile = file.path
                def ismodify = modifiedFile.matches("java(.*)")
              if (ismodify) {
                isOciBuildRequired = true
              }
            }
        }
    }
  return isOciBuildRequired
}

